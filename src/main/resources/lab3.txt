
Account.java
---------
package study.stepup.lab3;

import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;

@AllArgsConstructor
@EqualsAndHashCode
public class Account implements CachedAccount {
    private String currency;
    private int sum;

    @Override
    public String getCurrencyWithSum() {
        return sum + " " + currency;
    }

    @Override
    public boolean isCurrency(String currency) {
        return this.currency.equals(currency);
    }

    @Override
    public void setCurrency(String currency) {
        this.currency = currency;
    }

    @Override
    public void setSum(int sum) {
        this.sum = sum;
    }

}

Cache.java
---------
package study.stepup.lab3;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface Cache {
    long value();
}

CacheCleanup.java
---------
package study.stepup.lab3;

public interface CacheCleanup {
    void callDeferred(Runnable runnable, long delay);
}

CacheInvocationHandler.java
---------
package study.stepup.lab3;

import lombok.AllArgsConstructor;
import lombok.extern.java.Log;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.concurrent.ConcurrentHashMap;

@Log
@AllArgsConstructor
public class CacheInvocationHandler<T> implements InvocationHandler {

    private final T obj;
    private final CacheCleanup cacheCleanup;
    private final ConcurrentHashMap<String,Object> store = new ConcurrentHashMap<>();

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {

        String hash = String.format("%d-%d-%d", obj.hashCode(), method.hashCode(), Arrays.hashCode(args));
        if (method.isAnnotationPresent(Cache.class)) {
            var ttl = method.getAnnotation(Cache.class).value();
            var cacheValue = store.get(hash);
            if (cacheValue == null) {
                Object result = method.invoke(obj, args);
                store.put(hash, result);
                cacheCleanup.callDeferred(()->store.remove(hash), ttl);
                log.info("put:" + result.toString());
                return result;
            } else {
                log.info("get:" + cacheValue);
                return cacheValue;
            }
        }
        return method.invoke(obj, args);
    }

}

CacheUtils.java
---------
package study.stepup.lab3;

import java.lang.reflect.Proxy;

public class CacheUtils {

    public static <T, O> T cache(O obj, CacheCleanup cacheCleanup) {
        ClassLoader objClassLoader = obj.getClass().getClassLoader();
        Class[] interfaces = obj.getClass().getInterfaces();
        T proxyObj = (T) Proxy.newProxyInstance(objClassLoader, interfaces, new CacheInvocationHandler(obj, cacheCleanup));
        return proxyObj;
    }

}

CachedAccount.java
---------
package study.stepup.lab3;

import java.util.Map;

public interface CachedAccount {
    @Cache(1000)
    String getCurrencyWithSum();
    @Cache(1000)
    boolean isCurrency(String currency);
    void setCurrency(String currency) ;
    void setSum(int sum) ;

}

Cleaner.java
---------
package study.stepup.lab3;

import java.util.ArrayList;
import java.util.List;

public class Cleaner implements CacheCleanup{
    List<Runnable> queue = new ArrayList<>();

    @Override
    public void callDeferred(Runnable runnable, long delay) {
        queue.add(runnable);
    }

    public void flush() {
        queue.forEach(Runnable::run);
    }
}

ThreadPoolCleanup.java
---------
package study.stepup.lab3;

import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class ThreadPoolCleanup implements CacheCleanup {

    final ScheduledExecutorService executorService;

    public ThreadPoolCleanup(ScheduledExecutorService executorService) {
        this.executorService = executorService;
    }

    @Override
    public void callDeferred(Runnable runnable, long delay) {
        executorService.schedule(runnable, delay, TimeUnit.MILLISECONDS);
    }
}

