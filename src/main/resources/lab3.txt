
Account.java
---------
package study.stepup.lab3;

import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;

@AllArgsConstructor
@EqualsAndHashCode
public class Account implements CachedAccount {
    private String currency;
    private int sum;

    @Override
    public String getCurrencyWithSum() {
        return sum + " " + currency;
    }

    @Override
    public boolean isCurrency(String currency) {
        return this.currency.equals(currency);
    }

    @Override
    public void setCurrency(String currency) {
        this.currency = currency;
    }

    @Override
    public void setSum(int sum) {
        this.sum = sum;
    }

}

Cache.java
---------
package study.stepup.lab3;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface Cache {
    long value();
}

CacheCleaner.java
---------
package study.stepup.lab3;

import lombok.extern.java.Log;

@Log
public class CacheCleaner implements Runnable {
    private final CacheStore cacheStore;
    private final long sleepTime;
    private volatile boolean alive = true;

    public CacheCleaner(CacheStore cacheStore, long sleepTime) {
        this.cacheStore = cacheStore;
        this.sleepTime = sleepTime;
    }

    public void run() {
        log.info("run cache cleaner");
        while (alive) {
            for (var entry : cacheStore.info().entrySet()) {
                if (entry.getValue().getTtl() < System.currentTimeMillis()) {
                    log.info("remove:" + entry.getKey());
                    cacheStore.remove(entry.getKey());
                }
            }
            try {
                Thread.sleep(sleepTime);
            } catch (InterruptedException e) {
                alive = false;
                log.info("stop cache cleaner");
            }
        }
    }

}

CacheGetter.java
---------
package study.stepup.lab3;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface CacheGetter {
}

CacheStore.java
---------
package study.stepup.lab3;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.extern.java.Log;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

@AllArgsConstructor
@Getter
class CacheResult {
    private long ttl;
    private Object value;

    public void addTtl(long ttl) {
        this.ttl = System.currentTimeMillis() + ttl;
    }
    @Override
    public String toString() {
       return value.toString() + ":" + ttl;
    }
}

@Log
public class CacheStore {
    private final Map<String, CacheResult> cache = new HashMap<>();

    public void put(String key, Object value, long ttl) {
        cache.put(key, new CacheResult(System.currentTimeMillis() + ttl, value));
        log.info(cache.toString());
    }

    public void remove(String key) {
        cache.remove(key);
        log.info(cache.toString());
    }

    public Object get(String key, long ttl) {
        if (cache.get(key) == null) return null;
        cache.get(key).addTtl(ttl);
        log.info(cache.get(key).toString());
        return cache.get(key).getValue();
    }

    public void clear() {
        cache.clear();
        log.info(cache.toString());
    }

    public Map<String, CacheResult> info() {
        return Collections.unmodifiableMap(cache);
    }
}

CacheUtils.java
---------
package study.stepup.lab3;

import java.lang.reflect.Proxy;

public class CacheUtils {

    public static final int SLEEP_TIME = 50;
    private static final CacheStore cacheStore = new CacheStore();
    private static final Thread t = new Thread(new CacheCleaner(cacheStore, SLEEP_TIME));

    public static <T, O> T cache(O obj) {
        ClassLoader objClassLoader = obj.getClass().getClassLoader();
        Class[] interfaces = obj.getClass().getInterfaces();
        T proxyObj = (T) Proxy.newProxyInstance(objClassLoader, interfaces, new ProxyInvocationHandler(obj, cacheStore));
        return proxyObj;
    }

    public static void startCleaner() {
        t.start();
    }
    public static void stopCleaner() {
        t.interrupt();
    }

}

CachedAccount.java
---------
package study.stepup.lab3;

import java.util.Map;

public interface CachedAccount {
    @Cache(1000)
    String getCurrencyWithSum();
    @Cache(1000)
    boolean isCurrency(String currency);
    @Mutator
    void setCurrency(String currency) ;
    @Mutator
    void setSum(int sum) ;
    @CacheGetter
    default Map<String, Object> getCache() {
        return null;
    }

}

Mutator.java
---------
package study.stepup.lab3;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface Mutator {
}

ProxyInvocationHandler.java
---------
package study.stepup.lab3;

import lombok.AllArgsConstructor;
import lombok.extern.java.Log;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.util.Arrays;

@AllArgsConstructor
@Log
public class ProxyInvocationHandler<T> implements InvocationHandler {

    private final T obj;
    private final CacheStore cache;

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {

        String hash = String.format("%d-%d-%d", obj.hashCode(), method.hashCode(), Arrays.hashCode(args));
        if (method.isAnnotationPresent(Cache.class)) {
            var ttl = method.getAnnotation(Cache.class).value();
            var cacheValue = cache.get(hash, ttl);
            if (cacheValue == null) {
                Object result = method.invoke(obj, args);
                cache.put(hash, result, ttl);
                log.info("put:" + result.toString());
                return result;
            } else {
                log.info("get:" + cacheValue);
                return cacheValue;
            }
        } else if (method.isAnnotationPresent(Mutator.class)) {
            log.info("clear cache");
            cache.clear();
        } else if (method.isAnnotationPresent(CacheGetter.class)) {
            return cache.info();
        }
        return method.invoke(obj, args);
    }

}

CacheableTest.java
----------
package study.stepup.lab3;

import lombok.SneakyThrows;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class CacheableTest {
    Account account;
    CachedAccount cachedAccount;

    @BeforeEach
    void init(){
        account = new Account("RUB", 100);
        cachedAccount = CacheUtils.cache(account);
    }

    @BeforeAll
    static void start() {
        CacheUtils.startCleaner();
    }
    @AfterAll
    static void stop() {
        CacheUtils.stopCleaner();
    }

    @Test
    void testCachedGet() {
        cachedAccount.getCurrencyWithSum();
        assertFalse(cachedAccount.getCache().isEmpty());
    }

    @Test
    void testCachedGet2() {
        cachedAccount.isCurrency("USD");
        assertFalse(cachedAccount.getCache().isEmpty());
    }

    @Test
    @SneakyThrows
    void testCacheClear() {
        cachedAccount.getCurrencyWithSum();
        Thread.sleep(1200);
        assertTrue(cachedAccount.getCache().isEmpty());
    }

    @Test
    @SneakyThrows
    void testCacheClear2() {
        cachedAccount.isCurrency("USD");
        Thread.sleep(1200);
        assertTrue(cachedAccount.getCache().isEmpty());
    }

    @Test
    @SneakyThrows
    void testCacheLongLife() {
        cachedAccount.getCurrencyWithSum();
        Thread.sleep(800);
        cachedAccount.getCurrencyWithSum();
        assertFalse(cachedAccount.getCache().isEmpty());
    }
}
